local Player = game:GetService("Players").LocalPlayer
local LogService = game:GetService("LogService")

for i,v in pairs(getconnections(LogService.MessageOut)) do
    if v.Function then
        v:Disable()
    end
end

local ReplicatedFirst = game:GetService("ReplicatedFirst")
local Actor = ReplicatedFirst:WaitForChild("ReallyNotMainActor")

run_on_actor(Actor,[[
        local GarbageCollection = getgc(true)
        local Player = game.Players.LocalPlayer

        while not (Player.Character) and not Player.Character:FindFirstChild("Humanoid") do wait(0.25) print("Waiting for u to spawn.") end

        for i,v in pairs(getconnections(Player.Character.Humanoid.Changed)) do
            local Upvalues = getupvalues(v.Function)

            print(debug.getinfo(Upvalues[4]).name)

            if Upvalues[4] then
                hookfunction(Upvalues[4],function()
                    return
                end)

                print("wow easy bypass rel")
            end
        end
        
        ----------------------------------------------------------------------------------------------------------------------------------------------------

        getgenv().isnetworkowner = function(part)
            if part.ReceiveAge == 0 and not part.Anchored then
                for I,V in pairs(part:GetConnectedParts(true)) do
                    if V.Anchored then
                        error("Part is welded to an anchored part")
                        return false
                    end
                end
                return true
            else
                return false
            end
        end

        local WalkSpeedVal = 16
        local JumpPowerVal = 25

        local InfJump = false
        local DeleteGrab = false
        local RainbowGrab = false
        local FurtherThrow = false
        local MasslessGrab = false
        local FurtherThrowVal = 400
        local AuraRange = 30
        local SelectedPremToy = "Teleporter"
        local WalkSpeedEnabled = false
        local JumpPowerEnabled = false
        local VoidGrab = false
        local FarmGems = false
        local HoldFlingAura = false
        local HoldKillAura = false
        local FlingAura = false
        local FlingAuraPower = 500

        local CreateGrab
        local DestroyGrab

        for i,v in pairs(getgc()) do
            if type(v) == "function" then
                local info = debug.getinfo(v)

                if info.name == "CreateGrab" then
                    CreateGrab = v
                    print("Set create grab.")
                end

                if info.name == "DestroyGrab" then
                    DestroyGrab = v
                    print("Set destroy grab.")
                end
            end
        end

        local Camera = workspace.CurrentCamera
        local UserInputService = game:GetService("UserInputService")

        local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/Library.lua'))()
        local ThemeManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Awakenchan/Misc-Release/main/linoracolor'))()
        local SaveManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/addons/SaveManager.lua'))()

        local function getClosestPlayer(Radius)
            if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
                local closestPlayer
                local closestDistance = math.huge

                for _, v in pairs(game.Players:GetPlayers()) do
                    if v ~= Player and v.Character and v.Character:FindFirstChild("HumanoidRootPart") and v.Character:FindFirstChild("HumanoidRootPart").Material ~= Enum.Material.ForceField then
                        local distance = (Player.Character:GetPivot().Position - v.Character:GetPivot().Position).Magnitude

                        if distance < closestDistance and distance < Radius then
                            closestPlayer = v
                            closestDistance = distance
                        end
                    end
                end

                return closestPlayer
            end
        end

        local RainbowColor = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
            ColorSequenceKeypoint.new(0.25, Color3.fromRGB(255, 165, 0)),
            ColorSequenceKeypoint.new(0.5, Color3.fromRGB(255, 255, 0)),
            ColorSequenceKeypoint.new(0.75, Color3.fromRGB(0, 255, 0)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 255))
        })

        function Kill(char)
            if char then
                DestroyGrab()
                wait(0.1)
                local humanoid = char:FindFirstChild("Humanoid")
                if humanoid and humanoid.Health > 0 then
                    for _,v in pairs(char:GetDescendants()) do
                        if v:IsA("BasePart") then
                            v.CanCollide = false
                        end
                    end
            
                    local hrp = char:FindFirstChild("HumanoidRootPart")
                    if hrp then
                        hrp.CFrame = CFrame.new(Vector3.new(hrp.Position.X, -60, hrp.Position.Z))
                        while hrp:IsDescendantOf(workspace) do
                            hrp.AssemblyLinearVelocity = Vector3.new(0, -100, 0)
                            wait()
                        end
                    end
                end
            end
        end

        function KillNoDestroy(char)
            if char then
                local humanoid = char:FindFirstChild("Humanoid")
                if humanoid and humanoid.Health > 0 then
                    for _,v in pairs(char:GetDescendants()) do
                        if v:IsA("BasePart") then
                            v.CanCollide = false
                        end
                    end

                    local hrp = char:FindFirstChild("HumanoidRootPart")
                    if hrp then
                        hrp.CFrame = CFrame.new(Vector3.new(hrp.Position.X, -60, hrp.Position.Z))
                        while hrp:IsDescendantOf(workspace) do
                            hrp.AssemblyLinearVelocity = Vector3.new(0, -100, 0)
                            wait()
                        end
                    end
                end
            end
        end
        local TemplateBV = Instance.new("BodyVelocity")
        TemplateBV.Parent = nil
        TemplateBV.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
        TemplateBV.P = 1250
        local Reach = 30
        local Window = Library:CreateWindow({
            Title = "Wexort | UFG /- Paid",
            Center = true,
            AutoShow = true,
            TabPadding = 8,
            MenuFadeTime = 0.2
        })

        local Tabs = {
            MainTab = Window:AddTab('Main'),
            PlayerTab = Window:AddTab('Player'),
            WorldTab = Window:AddTab('World'),
            Farms = Window:AddTab('Farms'),
            Misc = Window:AddTab('Misc'),
            ["UI Settings"] = Window:AddTab("Settings")
        }

        local WorldTab_Main = Tabs.WorldTab:AddLeftGroupbox('World Main')
        local PlayerTab_Movement = Tabs.PlayerTab:AddLeftGroupbox('Movement')
        local PlayerTab_Grab = Tabs.PlayerTab:AddRightGroupbox('Grab')
        local PlayerTab_Aura = Tabs.PlayerTab:AddLeftGroupbox('Aura')
        local Main_Players = Tabs.MainTab:AddLeftGroupbox('Players')
        local Farms_GemFarm = Tabs.Farms:AddLeftGroupbox('Gem Farm')
        local Misc_PremiumToys = Tabs.Misc:AddLeftGroupbox("Premium Toys")
        ThemeManager:SetLibrary(Library)
        ThemeManager:ApplyToTab(Tabs['UI Settings'])
        ThemeManager:ApplyTheme("Tokyo Night")
        PlayerTab_Aura:AddToggle("EnableKillAura", {
            Text = "Void Aura",
            Default = false,
            Callback = function(Value)
                KillAura = Value

                while KillAura do
                    local closestPlayer = getClosestPlayer(AuraRange)

                    if closestPlayer and closestPlayer.Character and closestPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        task.defer(function()
                            repeat
                                CreateGrab({
                                    ["Color"] = RainbowColor,
                                    ["Instance"] = closestPlayer.Character.HumanoidRootPart,
                                    ["ObjectCFrame"] = CFrame.new(0, 0, 0),
                                    ["Position"] = closestPlayer.Character.HumanoidRootPart.Position
                                })
                                wait()
                            until workspace.Debris.Visual:FindFirstChild(Player.Name) or not game.Players:FindFirstChild(closestPlayer.Name) or closestPlayer.Character:FindFirstChildWhichIsA("Humanoid"):GetState() == Enum.HumanoidStateType.Dead
                            local AP = workspace.Debris.Visual:FindFirstChild(Player.Name):FindFirstChildWhichIsA("AlignPosition")
                            local AO = workspace.Debris.Visual:FindFirstChild(Player.Name):FindFirstChildWhichIsA("AlignOrientation")

                            AP.Enabled = false
                            AO.Enabled = false
                        end)
                        wait(0.3)
                        if workspace.Debris.Visual:FindFirstChild(Player.Name) then
                            coroutine.wrap(Kill)(closestPlayer.Character)
                        end
                    end

                    wait(0.1)
                end
            end
        })

        PlayerTab_Aura:AddToggle("EnableHoldKillAura", {
            Text = "Hold Void Aura",
            Default = false,
            Callback = function(Value)
                HoldKillAura = Value

                while HoldKillAura do
                    local closestPlayer = getClosestPlayer(AuraRange)

                    if closestPlayer and closestPlayer.Character and closestPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        task.defer(function()
                            repeat
                                CreateGrab({
                                    ["Color"] = RainbowColor,
                                    ["Instance"] = closestPlayer.Character.HumanoidRootPart,
                                    ["ObjectCFrame"] = CFrame.new(0, 0, 0),
                                    ["Position"] = closestPlayer.Character.HumanoidRootPart.Position
                                })
                                wait()
                            until workspace.Debris.Visual:FindFirstChild(Player.Name) or not game.Players:FindFirstChild(closestPlayer.Name) or closestPlayer.Character:FindFirstChildWhichIsA("Humanoid"):GetState() == Enum.HumanoidStateType.Dead
                            local AP = workspace.Debris.Visual:FindFirstChild(Player.Name):FindFirstChildWhichIsA("AlignPosition")
                            local AO = workspace.Debris.Visual:FindFirstChild(Player.Name):FindFirstChildWhichIsA("AlignOrientation")

                            AP.Enabled = false
                            AO.Enabled = false
                        end)
                        wait(0.2)
                        if workspace.Debris.Visual:FindFirstChild(Player.Name) then
                            coroutine.wrap(KillNoDestroy)(closestPlayer.Character)
                        end
                    end

                    wait(0.1)
                end
            end
        })
        Main_Players:AddButton({
            Text = "Kill All",
            Func = function()
                local old = Player.Character:GetPivot()
                for _,v in pairs(game.Players:GetPlayers()) do
                    if v ~= Player and v.Character and v.Character:FindFirstChild("HumanoidRootPart") and v.Character:FindFirstChild("HumanoidRootPart").Material ~= Enum.Material.ForceField then
                        setupvalue(CreateGrab,2,100)
                        Player.Character:PivotTo(v.Character:GetPivot())
                        Player.Character:FindFirstChild("HumanoidRootPart").AssemblyLinearVelocity = Vector3.new(0,0,0)
                        wait(0.2)
                        task.defer(function()
                            repeat
                                CreateGrab({
                                    ["Color"] = RainbowColor,
                                    ["Instance"] = v.Character.HumanoidRootPart,
                                    ["ObjectCFrame"] = CFrame.new(0, 0, 0),
                                    ["Position"] = v.Character.HumanoidRootPart.Position
                                })
                                wait()
                            until workspace.Debris.Visual:FindFirstChild(Player.Name) or not game.Players:FindFirstChild(v.Name) or v.Character:FindFirstChildWhichIsA("Humanoid"):GetState() == Enum.HumanoidStateType.Dead
                            local AP = workspace.Debris.Visual:FindFirstChild(Player.Name):FindFirstChildWhichIsA("AlignPosition")
                            local AO = workspace.Debris.Visual:FindFirstChild(Player.Name):FindFirstChildWhichIsA("AlignOrientation")
            
                            AP.Enabled = false
                            AO.Enabled = false
                        end)
                        wait(0.2)
                        if workspace.Debris.Visual:FindFirstChild(Player.Name) then
                            coroutine.wrap(Kill)(v.Character)
                        end
                        Player.Character:FindFirstChild("HumanoidRootPart").AssemblyLinearVelocity = Vector3.new(0,0,0)
                        wait(0.1)
                    end
                end
                Player.Character:PivotTo(old)
            end
        })
        Main_Players:AddButton({
            Text = "Fling All",
            Func = function()
                local old = Player.Character:GetPivot()
                for _,v in pairs(game.Players:GetPlayers()) do
                    if v ~= Player and v.Character and v.Character:FindFirstChild("HumanoidRootPart") and v.Character:FindFirstChild("HumanoidRootPart").Material ~= Enum.Material.ForceField then
                        setupvalue(CreateGrab,2,100)
                        Player.Character:FindFirstChild("HumanoidRootPart").AssemblyLinearVelocity = Vector3.new(0,0,0)
                        Player.Character:PivotTo(v.Character:GetPivot())
                        wait(0.2)
                        task.defer(function()
                            repeat
                                CreateGrab({
                                    ["Color"] = RainbowColor,
                                    ["Instance"] = v.Character.HumanoidRootPart,
                                    ["ObjectCFrame"] = CFrame.new(0, 0, 0),
                                    ["Position"] = v.Character.HumanoidRootPart.Position
                                })
                                wait()
                            until workspace.Debris.Visual:FindFirstChild(Player.Name) or not game.Players:FindFirstChild(v.Name) or v.Character:FindFirstChildWhichIsA("Humanoid"):GetState() == Enum.HumanoidStateType.Dead
                            local AP = workspace.Debris.Visual:FindFirstChild(Player.Name):FindFirstChildWhichIsA("AlignPosition")
                            local AO = workspace.Debris.Visual:FindFirstChild(Player.Name):FindFirstChildWhichIsA("AlignOrientation")
                            AP.Enabled = false
                            AO.Enabled = false
                        end)
                        wait(0.2)
                        if workspace.Debris.Visual:FindFirstChild(Player.Name) then
                            if not v.Character.HumanoidRootPart:FindFirstChildWhichIsA("BodyVelocity") then
                                print("skidded!!!")
                                local BV = Instance.new("BodyVelocity", v.Character.HumanoidRootPart)
                                BV.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
                                BV.P = 1250
                                local HRP = Player.Character:FindFirstChild("HumanoidRootPart")
                                BV.Velocity = HRP.CFrame.LookVector * FlingAuraPower + Vector3.new(0, 100, 0)
                            end
                        end
                        Player.Character:FindFirstChild("HumanoidRootPart").AssemblyLinearVelocity = Vector3.new(0,0,0)
                        DestroyGrab()
                        wait(0.1)
                    end
                end
                Player.Character:PivotTo(old)
            end
        })
        PlayerTab_Aura:AddToggle("EnableHoldFlingAura", {
            Text = "Hold Fling Aura",
            Default = false,
            Callback = function(Value)
                HoldFlingAura = Value

                while HoldFlingAura do
                    local closestPlayer = getClosestPlayer(AuraRange)

                    if closestPlayer and closestPlayer.Character and closestPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        task.defer(function()
                            repeat
                                CreateGrab({
                                    ["Color"] = RainbowColor,
                                    ["Instance"] = closestPlayer.Character.HumanoidRootPart,
                                    ["ObjectCFrame"] = CFrame.new(0, 0, 0),
                                    ["Position"] = closestPlayer.Character.HumanoidRootPart.Position
                                })
                                wait()
                            until workspace.Debris.Visual:FindFirstChild(Player.Name) or not game.Players:FindFirstChild(closestPlayer.Name) or closestPlayer.Character:FindFirstChildWhichIsA("Humanoid"):GetState() == Enum.HumanoidStateType.Dead
                            local AP = workspace.Debris.Visual:FindFirstChild(Player.Name):FindFirstChildWhichIsA("AlignPosition")
                            local AO = workspace.Debris.Visual:FindFirstChild(Player.Name):FindFirstChildWhichIsA("AlignOrientation")

                            AP.Enabled = false
                            AO.Enabled = false
                        end)
                        wait(0.2)
                        if workspace.Debris.Visual:FindFirstChild(Player.Name) then
                            print("found")
                            if not closestPlayer.Character.HumanoidRootPart:FindFirstChildWhichIsA("BodyVelocity") then
                                print("skidded!!!")
                                local BV = Instance.new("BodyVelocity", closestPlayer.Character.HumanoidRootPart)
                                BV.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
                                BV.P = 1250
                                local HRP = Player.Character:FindFirstChild("HumanoidRootPart")
                                BV.Velocity = HRP.CFrame.LookVector * FlingAuraPower + Vector3.new(0, 100, 0)
                            end
                        end
                    end

                    wait(0.1)
                end
            end
        })



        PlayerTab_Aura:AddToggle("EnableFlingAura", {
            Text = "Fling Aura",
            Default = false,
            Callback = function(Value)
                FlingAura = Value

                while FlingAura do
                    local closestPlayer = getClosestPlayer(AuraRange)

                    if closestPlayer and closestPlayer.Character and closestPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        
                        task.defer(function()
                            repeat
                                CreateGrab({
                                    ["Color"] = RainbowColor,
                                    ["Instance"] = closestPlayer.Character.HumanoidRootPart,
                                    ["ObjectCFrame"] = CFrame.new(0, 0, 0),
                                    ["Position"] = closestPlayer.Character.HumanoidRootPart.Position
                                })
                                wait()
                            until workspace.Debris.Visual:FindFirstChild(Player.Name) or not game.Players:FindFirstChild(closestPlayer.Name) or closestPlayer.Character:FindFirstChildWhichIsA("Humanoid"):GetState() == Enum.HumanoidStateType.Dead
                            local AP = workspace.Debris.Visual:FindFirstChild(Player.Name):FindFirstChildWhichIsA("AlignPosition")
                            local AO = workspace.Debris.Visual:FindFirstChild(Player.Name):FindFirstChildWhichIsA("AlignOrientation")

                            AP.Enabled = false
                            AO.Enabled = false
                        end)
                        wait(0.2)
                        if workspace.Debris.Visual:FindFirstChild(Player.Name) then
                            print("found")
                            if closestPlayer.Character:FindFirstChild("HumanoidRootPart") and not closestPlayer.Character:FindFirstChild("HumanoidRootPart") :FindFirstChildWhichIsA("BodyVelocity") then
                                print("skidded!!!")
                                local BV = Instance.new("BodyVelocity", closestPlayer.Character:FindFirstChild("HumanoidRootPart") )
                                BV.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
                                BV.P = 1250
                                local HRP = Player.Character:FindFirstChild("HumanoidRootPart")
                                BV.Velocity = HRP.CFrame.LookVector * FlingAuraPower + Vector3.new(0, 100, 0)
                            end
                        end
                        DestroyGrab()
                    end

                    wait(0.1)
                end
            end
        })
        PlayerTab_Aura:AddSlider("AuraRangeSlider",{
            Text = "Aura Range",
            Min = 0,
            Max = 100,
            Default = 30,
            Rounding = 0,
            Compact = false,
            Callback = function(Value)
                AuraRange = Value
                setupvalue(CreateGrab,2,Value)
            end    
        })
        PlayerTab_Aura:AddSlider("FlingPowerSlider",{
            Text = "Fling Aura Power",
            Min = 0,
            Max = 2000,
            Default = 500,
            Rounding = 0,
            Compact = false,
            Callback = function(Value)
                FlingAuraPower = Value
            end    
        })

        PlayerTab_Movement:AddToggle("EnableWalkSpeed",{
            Text = "Enable WalkSpeed",
            Default = false,
            Callback = function(Value)
                WalkSpeedEnabled = Value

                while WalkSpeedEnabled == true do
                    if (Player.Character) and Player.Character:FindFirstChild("Humanoid") then
                        Player.Character.Humanoid.WalkSpeed = WalkSpeedVal
                    end        
                    wait(0.1)
                end

                if (Player.Character) and Player.Character:FindFirstChild("Humanoid") then
                    Player.Character.Humanoid.WalkSpeed = 16
                end    
            end
        })

        PlayerTab_Movement:AddToggle("EnableJumpPower",{
            Text = "Enable JumpPower",
            Default = false,
            Callback = function(Value)
                JumpPowerEnabled = Value

                while JumpPowerEnabled == true do
                    if (Player.Character) and Player.Character:FindFirstChild("Humanoid") then
                        Player.Character.Humanoid.JumpPower = JumpPowerVal
                    end        
                    wait(0.1)
                end

                if (Player.Character) and Player.Character:FindFirstChild("Humanoid") then
                    Player.Character.Humanoid.JumpPower = 25
                end  
            end    
        })

        PlayerTab_Movement:AddSlider("WalkSpeedSlider",{
            Text = "WalkSpeed Amount",
            Min = 16,
            Max = 500,
            Default = 16,
            Rounding = 0,
            Compact = false,
            Callback = function(Value)
                WalkSpeedVal = Value
            end    
        })

        PlayerTab_Movement:AddSlider("JumpPowerSlider",{
            Text = "JumpPower Amount",
            Min = 25,
            Max = 500,
            Default = 25,
            Rounding = 0,
            Compact = false,
            Callback = function(Value)
                JumpPowerVal = Value
            end    
        })

        workspace.Debris.Visual.ChildAdded:Connect(function(Child)
            if Child.Name == Player.Name then
                local Target = Child:WaitForChild("EshkereWeld").Part1

                Child:GetPropertyChangedSignal("Parent"):Once(function()
                    if (FurtherThrow) and UserInputService:GetLastInputType() == Enum.UserInputType.MouseButton2 then
                        local ThrowVelocity = TemplateBV:Clone()
                        ThrowVelocity.Velocity = Camera.CFrame.LookVector * FurtherThrowVal
                        ThrowVelocity.Parent = Target

                        wait(1)
                        ThrowVelocity:Destroy()
                    end
                end)

                if MasslessGrab then
                    local AP = Child:FindFirstChildWhichIsA("AlignPosition")
                    local AO = Child:FindFirstChildWhichIsA("AlignOrientation")

                    AP.MaxForce = math.huge
                    AP.Responsiveness = 400
                    AO.MaxTorque = math.huge
                    AO.Responsiveness = 400
                end
                if VoidGrab then
                    local Hum = Child:FindFirstChildWhichIsA("Weld").Part1
                    if Hum and Hum.Parent and Hum.Parent:FindFirstChildWhichIsA("Humanoid") then
                        wait(0.25)
                        Kill(Hum.Parent)
                    end
                end
            end
        end)
        function farm(thing)
            wait(2)
            setupvalue(CreateGrab,2,100)
            local old = Player.Character:FindFirstChild("HumanoidRootPart"):GetPivot()
            Player.Character:FindFirstChild("HumanoidRootPart"):PivotTo(thing:GetPivot())
            repeat
                CreateGrab({
                    ["Color"] = RainbowColor,
                    ["Instance"] = thing.PrimaryPart,
                    ["ObjectCFrame"] = CFrame.new(0,0,0),
                    ["Position"] = thing.PrimaryPart.Position
                })
                wait()
            until workspace.Debris.Visual:FindFirstChild(Player.Name)
            Player.Character:FindFirstChild("HumanoidRootPart"):PivotTo(thing:GetPivot())
            local shit = workspace.Debris.Visual:FindFirstChild(Player.Name)
            local AP = shit:FindFirstChildWhichIsA("AlignPosition")
            local AO = shit:FindFirstChildWhichIsA("AlignOrientation")

            AP.MaxForce = math.huge
            AP.Responsiveness = 400
            AO.MaxTorque = math.huge
            AO.Responsiveness = 400
            thing.PrimaryPart.AssemblyLinearVelocity = Vector3.new(0,250,0)
            wait(0.4)
            Player.Character:FindFirstChild("HumanoidRootPart"):PivotTo(old)
            Player.Character:FindFirstChild("HumanoidRootPart").AssemblyLinearVelocity = Vector3.new(0,0,0)
            setupvalue(CreateGrab,2,Reach)
        end
        workspace.GemBoxes.ChildAdded:Connect(function(child)
            if string.find(child.Name:lower(), "crate") and FarmGems and child.PrimaryPart then
                farm(child)
            end
        end)

        Farms_GemFarm:AddToggle("FarmGems",{
            Text = "Farm Gems",
            Default = false,
            Callback = function(Value)
                FarmGems = Value
                if FarmGems then
                    for _,v in pairs(workspace.GemBoxes:GetChildren()) do
                        if string.find(v.Name:lower(), "crate") then
                            if v.PrimaryPart then
                                farm(v)
                            end
                        end
                        wait(0.5)
                    end
                end
            end    
        })
        PlayerTab_Grab:AddToggle("EnableStrongerThrow",{
            Text = "Strong Throw",
            Default = false,
            Callback = function(Value)
                FurtherThrow = Value
            end    
        })
        PlayerTab_Grab:AddToggle("EnableMasslessGrab",{
            Text = "Strong Grab",
            Default = false,
            Callback = function(Value)
                MasslessGrab = Value
            end    
        })

        PlayerTab_Grab:AddToggle("EnableVoidGrab",{
            Text = "Void Grab",
            Default = false,
            Callback = function(Value)
                VoidGrab = Value
            end    
        })

        PlayerTab_Grab:AddSlider("ThrowStrengthSlider",{
            Text = "Throw Strength",
            Min = 100,
            Max = 2000,
            Default = 400,
            Rounding = 0,
            Compact = false,
            Callback = function(Value)
                FurtherThrowVal = Value
            end    
        })

        PlayerTab_Grab:AddSlider("ChangeReachSlider",{
            Text = "Reach",
            Min = 20,
            Max = 100,
            Default = 20,
            Rounding = 0,
            Compact = false,
            Callback = function(Value)
                Reach = Value
                setupvalue(CreateGrab,2,Value)
            end    
        })

        WorldTab_Main:AddToggle("EnableAntiVoid",{
            Text = "Anti Void",
            Default = false,
            Callback = function(Value)
                for i,v in pairs(workspace["2MAP"]["6_water"].visiblewater:GetChildren()) do
                    v.CanCollide = Value
                end
                if Value then
                    workspace.FallenPartsDestroyHeight = -50000
                else
                    workspace.FallenPartsDestroyHeight = -100
                end
            end    
        })

        WorldTab_Main:AddSlider("GravitySlider",{
            Text = "Gravity",
            Min = 0,
            Max = 1000,
            Default = 100,
            Rounding = 0,
            Compact = false,
            Callback = function(Value)
                workspace.Gravity = Value
            end
        })
    ]])
